<?php

/* Quit */
defined('ABSPATH') OR exit;

if (! class_exists( 'Itslides_MB' ) ) :
class Itslides_MB {

	function metabox( $post_type ) {
		$post_types = array( 'itslider' );
		if ( in_array( $post_type, $post_types ) ) {
			add_meta_box(
				$id = 'itslider-meta',
				$title = __( 'Slide', 'itslides' ),
				$callback = array( $this, 'metabox_form' ),
				$post_type,
				$context = 'normal',
				$priority = 'high',
				$callback_args = null
			);
		}
	}

	function metabox_form() {
		global $post;
		$repeatable_fields = get_post_meta($post->ID, '_itslide', true);

		wp_nonce_field( 'itslider_slide_box', 'itslider_slide_box_nonce' );
		?>

		<script type="text/javascript">
		jQuery(document).ready(function( $ ){
			$( '#add-row' ).on('click', function() {
				var row = $( '.empty-row.screen-reader-text' ).clone(true);
				row.removeClass( 'empty-row screen-reader-text' );
				row.insertBefore( '#repeatable-fieldset-one tbody>tr:last' );
				return false;
			});

			$( '.remove-row' ).on('click', function() {
				$(this).parents('tr').remove();
				return false;
			});

			$( '#repeatable-fieldset-one tbody').sortable({
				opacity: 0.6,
				revert: true,
				cursor: 'move'
			});

/* ----------- */

var tgm_media_frame;

// Bind to our click event in order to open up the new media experience.
$(document.body).on('click.tgmOpenMediaManager', '.image-button', function(e){
		// Prevent the default action from occuring.
		e.preventDefault();

		// If the frame already exists, re-open it.
		if ( tgm_media_frame ) {
				tgm_media_frame.open();
				return;
		}

		/**
		 * The media frame doesn't exist let, so let's create it with some options.
		 *
		 * This options list is not exhaustive, so I encourage you to view the
		 * wp-includes/js/media-views.js file to see some of the other default
		 * options that can be utilized when creating your own custom media workflow.
		 */
		tgm_media_frame = wp.media.frames.tgm_media_frame = wp.media({
				/**
				 * We can pass in a custom class name to our frame, so we do
				 * it here to provide some extra context for styling our
				 * media workflow. This helps us to prevent overwriting styles
				 * for other media workflows.
				 */
				className: 'media-frame tgm-media-frame',

				/**
				 * When creating a new media workflow, we are given two types
				 * of frame workflows to chose from: 'select' or 'post'.
				 *
				 * The 'select' workflow is the default workflow, mainly beneficial
				 * for uses outside of a post or post type experience where a post ID
				 * is crucial.
				 *
				 * The 'post' workflow is tailored to screens where utilizing the
				 * current post ID is critical.
				 *
				 * Since we only want to upload an image, let's go with the 'select'
				 * frame option.
				 */
				frame: 'select',

				/**
				 * We can determine whether or not we want to allow users to be able
				 * to upload multiple files at one time by setting this parameter to
				 * true or false. It defaults to true, but we only want the user to
				 * upload one file, so let's set it to false.
				 */
				multiple: false,

				/**
				 * We can set a custom title for our media workflow. I've localized
				 * the script with the object 'tgm_nmp_media' that holds our
				 * localized stuff and such. Let's populate the title with our custom
				 * text.
				 */
				title: 'Upload or chose',

				/**
				 * We can force what type of media to show when the user views his/her
				 * library. Since we are uploading an image, let's limit the view to
				 * images only.
				 */
				library: {
						type: 'image'
				},

				/**
				 * Let's customize the button text. It defaults to 'Select', but we
				 * can customize it here to give us better context.
				 *
				 * We can also determine whether or not the modal requires a selection
				 * before the button is enabled. It requires a selection by default,
				 * and since this is the experience desired, let's keep it that way.
				 *
				 * By default, the toolbar generated by this frame fires a generic
				 * 'select' event when the button is clicked. We could declare our
				 * own events here, but the default event will work just fine.
				 */
				button: {
						text:  'Insert Image'
				}
		});

		/**
		 * ========================================================================
		 * EVENT BINDING
		 *
		 * This section before opening the modal window should be used to bind to
		 * any events where we want to customize the view. This includes binding
		 * to any custom events that may have been generated by us creating
		 * custom controller states and views.
		 *
		 * The events used below are not exhaustive, so I encourage you to again
		 * study the wp-includes/js/media-views.js file for a better feel of all
		 * the potential events you can attach to.
		 * ========================================================================
		 */

		/**
		 * We are now attaching to the default 'select' event and grabbing our
		 * selection data. Since the button requires a selection, we know that a
		 * selection will be available when the event is fired.
		 *
		 * All we are doing is grabbing the current state of the frame (which will
		 * be 'library' since that's the only area where we can make a selection),
		 * getting the selection, calling the 'first' method to pluck the first
		 * object from the string and then forcing a faux JSON representation of
		 * the model.
		 *
		 * When all is said and done, we are given absolutely everything we need to
		 * insert the data into our custom input field. Specifically, our
		 * media_attachment object will hold a key titled 'url' that we want to use.
		 */
		tgm_media_frame.on('select', function(){
				// Grab our attachment selection and construct a JSON representation of the model.
				var media_attachment = tgm_media_frame.state().get('selection').first().toJSON();

				// Send the attachment URL to our custom input field via jQuery.
				$('#slide-url').val(media_attachment.url);
		});

		// Now that everything has been set, let's open up the frame.
		tgm_media_frame.open();
});
/* ----------- */

		});
		</script>

		Describe what we are doing here.
		<table id="repeatable-fieldset-one" width="100%">
		<thead>
			<tr>
				<th width="5%"></th>
				<th width="40%">Image</th>
				<th width="40%"></th>
				<th width="10%"></th>
			</tr>
		</thead>
		<tbody>

		<?php
		if ( $repeatable_fields ) :
		foreach ( $repeatable_fields as $field ) {
		?>
		<tr class="sortable">
			<td><span class="dashicons dashicons-menu"></span></td>
			<td><input type="text" id="slide-url" class="widefat" name="image[]" value="<?php if($field['image'] != '') echo esc_attr( $field['image'] ); ?>" /></td>
			<td><a class="image-button button"><?php _e( 'Choose or Upload an Image', 'itslides' ); ?></a></td>
			<td><a class="button remove-row" href="#"><?php _e( 'Remove', 'itslides'); ?></a></td>
		</tr>
		<?php
		}
		else :
		// show a blank one
		?>
		<tr class="sortable">
			<td><span class="dashicons dashicons-menu"></span></td>
			<td><input type="text" id="slide-url" class="widefat" name="image[]" /></td>
			<td><a class="image-button button"><?php _e( 'Choose or Upload an Image', 'itslides' ); ?></a></td>
			<td><a class="button remove-row" href="#"><?php _e( 'Remove', 'itslides'); ?></a></td>
		</tr>
		<?php endif; ?>

		<!-- empty hidden one for jQuery -->
		<tr class="empty-row screen-reader-text">
			<td><span class="dashicons dashicons-menu"></td>
			<td><input type="text" id="slide-url" class="widefat" name="image[]" /></td>
			<td><a class="image-button button"><?php _e( 'Choose or Upload an Image', 'itslides' ); ?></a></td>
			<td><a class="button remove-row" href="#"><?php _e( 'Remove', 'itslides'); ?></a></td>
		</tr>
		</tbody>
		</table>

		<p><a id="add-row" class="button" href="#"><?php _e( 'Add another image', 'itslides' ); ?></a></p>
		<?php
	}

	function save( $post_id ) {

		if ( ! isset( $_POST['itslider_slide_box_nonce'] ) ) {
			return $post_id;
		}

		$nonce = $_POST['itslider_slide_box_nonce'];

		// Verify that the nonce is valid.
		if ( ! wp_verify_nonce( $nonce, 'itslider_slide_box' ) ) {
			return $post_id;
		}

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return $post_id;
		}

		if ( 'page' == $_POST['post_type'] ) {
			if ( ! current_user_can( 'edit_page', $post_id ) ) {
				return $post_id;
			}
		} else {
			if ( ! current_user_can( 'edit_post', $post_id ) ) {
				return $post_id;
			}
		}

		/* OK, it's safe for us to save the data now. */

// Sanitize the user input.
//$mydata = sanitize_text_field( $_POST['itslide_new_field'] );

		$old = get_post_meta($post_id, '_itslide', true);
		$new = array();

		$images = $_POST['image'];

		$count = count( $images );

		for ( $i = 0; $i < $count; $i++ ) {
			if ( $images[$i] != '' )
				$new[$i]['image'] = stripslashes( strip_tags( $images[$i] ) );
		}

		if ( !empty( $new ) && $new != $old )
			update_post_meta( $post_id, '_itslide', $new );
		elseif ( empty($new) && $old )
			delete_post_meta( $post_id, '_itslide', $old );

	}

}

endif; // End Check Class Exists
